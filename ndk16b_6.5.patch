diff --git a/DEPS b/DEPS
index bc9e4e0a90..30e065421d 100644
--- a/DEPS
+++ b/DEPS
@@ -21,14 +21,6 @@ deps = {
     Var('chromium_url') + '/chromium/buildtools.git' + '@' + '6fe4a3251488f7af86d64fc25cf442e817cf6133',
   'v8/base/trace_event/common':
     Var('chromium_url') + '/chromium/src/base/trace_event/common.git' + '@' + '0e9a47d74970bee1bbfc063c47215406f8918699',
-  'v8/third_party/android_ndk': {
-    'url': Var('chromium_url') + '/android_ndk.git' + '@' + 'e951c37287c7d8cd915bf8d4149fd4a06d808b55',
-    'condition': 'checkout_android',
-  },
-  'v8/third_party/android_tools': {
-    'url': Var('chromium_url') + '/android_tools.git' + '@' + 'c78b25872734e0038ae2a333edc645cd96bc232d',
-    'condition': 'checkout_android',
-  },
   'v8/third_party/catapult': {
     'url': Var('chromium_url') + '/catapult.git' + '@' + 'b4826a52853c9c2778d496f6c6fa853f777f94df',
     'condition': 'checkout_android',
@@ -65,7 +57,6 @@ deps = {

 recursedeps = [
   'v8/buildtools',
-  'v8/third_party/android_tools',
 ]

 include_rules = [
diff --git a/Makefile b/Makefile
index 167ebf8c08..ca1005f22f 100644
--- a/Makefile
+++ b/Makefile
@@ -35,6 +35,7 @@ ANDROID_NDK_HOST_ARCH ?=
 ANDROID_V8 ?= /data/local/tmp/v8

 # Special build flags. Use them like this: "make library=shared"
+GYPFLAGS += -Dwant_separate_host_toolset=0

 # library=shared || component=shared_library
 ifeq ($(library), shared)
@@ -47,6 +48,13 @@ endif
 ifeq ($(disassembler), on)
   GYPFLAGS += -Dv8_enable_disassembler=1
 endif
+# inspector=on/off
+ifeq ($(inspector), on)
+  GYPFLAGS += -Dv8_enable_inspector=1
+endif
+ifeq ($(inspector), off)
+  GYPFLAGS += -Dv8_enable_inspector=0
+endif
 # objectprint=on
 ifeq ($(objectprint), on)
   GYPFLAGS += -Dv8_object_print=1
diff --git a/Makefile.android b/Makefile.android
index 417152177d..e129be63e3 100644
--- a/Makefile.android
+++ b/Makefile.android
@@ -35,18 +35,27 @@ MODES = release debug
 ANDROID_BUILDS = $(foreach mode,$(MODES), \
                    $(addsuffix .$(mode),$(ANDROID_ARCHES)))

+HOST_OS = $(shell uname -s | sed -e 's/Linux/linux/;s/Darwin/darwin/')
+HOST_ARCH = $(shell uname -m | sed -e 's/i[3456]86/x86/')
+
 ifeq ($(ARCH), android_arm)
   DEFINES  = target_arch=arm v8_target_arch=arm
+  ANDROID_TOOLCHAIN = $(ANDROID_NDK_ROOT)/toolchains/arm-linux-androideabi-4.9/prebuilt/$(HOST_OS)-$(HOST_ARCH)/arm-linux-androideabi/bin
 else ifeq ($(ARCH), android_arm64)
   DEFINES  = target_arch=arm64 v8_target_arch=arm64
+  ANDROID_TOOLCHAIN = $(ANDROID_NDK_ROOT)/toolchains/aarch64-linux-android-4.9/prebuilt/$(HOST_OS)-$(HOST_ARCH)/aarch64-linux-android/bin
 else ifeq ($(ARCH), android_mipsel)
   DEFINES  = target_arch=mipsel v8_target_arch=mipsel
+  ANDROID_TOOLCHAIN = $(ANDROID_NDK_ROOT)/toolchains/mipsel-linux-android-4.9/prebuilt/$(HOST_OS)-$(HOST_ARCH)/mipsel-linux-android/bin
 else ifeq ($(ARCH), android_ia32)
   DEFINES = target_arch=ia32 v8_target_arch=ia32
+  ANDROID_TOOLCHAIN = $(ANDROID_NDK_ROOT)/toolchains/x86-4.9/prebuilt/$(HOST_OS)-$(HOST_ARCH)/i686-linux-android/bin
 else ifeq ($(ARCH), android_x64)
   DEFINES = target_arch=x64 v8_target_arch=x64
+  ANDROID_TOOLCHAIN = $(ANDROID_NDK_ROOT)/toolchains/x86_64-4.9/prebuilt/$(HOST_OS)-$(HOST_ARCH)/x86_64-linux-android/bin
 else ifeq ($(ARCH), android_x87)
   DEFINES = target_arch=ia32 v8_target_arch=x87
+  ANDROID_TOOLCHAIN = $(ANDROID_NDK_ROOT)/toolchains/x86-4.9/prebuilt/$(HOST_OS)-$(HOST_ARCH)/i686-linux-android/bin
 else
   $(error Target architecture "${ARCH}" is not supported)
 endif
@@ -57,6 +66,7 @@ DEFINES += OS=android
 .SECONDEXPANSION:
 $(ANDROID_BUILDS): $(OUTDIR)/Makefile.$$@
 	@$(MAKE) -C "$(OUTDIR)" -f Makefile.$@ \
+	          AR="$(ANDROID_TOOLCHAIN)/ar" \
 	          BUILDTYPE=$(shell echo $(subst .,,$(suffix $@)) | \
 	                      python -c "print raw_input().capitalize()") \
 	          builddir="$(shell pwd)/$(OUTDIR)/$@"
diff --git a/gypfiles/standalone.gypi b/gypfiles/standalone.gypi
index ec47f1c0ab..574fb0e651 100644
--- a/gypfiles/standalone.gypi
+++ b/gypfiles/standalone.gypi
@@ -299,7 +299,7 @@
             'android_ndk_root%': '<(base_dir)/third_party/android_ndk/',
             'android_host_arch%': "<!(uname -m | sed -e 's/i[3456]86/x86/')",
             # Version of the NDK. Used to ensure full rebuilds on NDK rolls.
-            'android_ndk_version%': 'r12b',
+            'android_ndk_version%': 'r16b',
             'host_os%': "<!(uname -s | sed -e 's/Linux/linux/;s/Darwin/mac/')",
             'os_folder_name%': "<!(uname -s | sed -e 's/Linux/linux/;s/Darwin/darwin/')",
           },
@@ -316,36 +316,42 @@
               'android_target_arch%': 'x86',
               'android_target_platform%': '16',
               'arm_version%': 'default',
+              'android_triple%': 'i686-linux-android',
             }],
             ['target_arch == "x64"', {
               'android_toolchain%': '<(android_ndk_root)/toolchains/x86_64-4.9/prebuilt/<(os_folder_name)-<(android_host_arch)/bin',
               'android_target_arch%': 'x86_64',
               'android_target_platform%': '21',
               'arm_version%': 'default',
+              'android_triple%': 'x86_64-linux-android',
             }],
             ['target_arch=="arm"', {
               'android_toolchain%': '<(android_ndk_root)/toolchains/arm-linux-androideabi-4.9/prebuilt/<(os_folder_name)-<(android_host_arch)/bin',
               'android_target_arch%': 'arm',
               'android_target_platform%': '16',
               'arm_version%': 7,
+              'android_triple%': 'arm-linux-androideabi',
             }],
             ['target_arch == "arm64"', {
               'android_toolchain%': '<(android_ndk_root)/toolchains/aarch64-linux-android-4.9/prebuilt/<(os_folder_name)-<(android_host_arch)/bin',
               'android_target_arch%': 'arm64',
               'android_target_platform%': '21',
               'arm_version%': 'default',
+              'android_triple%': 'aarch64-linux-android',
             }],
             ['target_arch == "mipsel"', {
               'android_toolchain%': '<(android_ndk_root)/toolchains/mipsel-linux-android-4.9/prebuilt/<(os_folder_name)-<(android_host_arch)/bin',
               'android_target_arch%': 'mips',
               'android_target_platform%': '16',
               'arm_version%': 'default',
+              'android_triple%': 'mipsel-linux-android',
             }],
             ['target_arch == "mips64el"', {
               'android_toolchain%': '<(android_ndk_root)/toolchains/mips64el-linux-android-4.9/prebuilt/<(os_folder_name)-<(android_host_arch)/bin',
               'android_target_arch%': 'mips64',
               'android_target_platform%': '21',
               'arm_version%': 'default',
+              'android_triple%': 'mips64el-linux-android',
             }],
           ],
         },
@@ -356,6 +362,7 @@
         'android_target_platform%': '<(android_target_platform)',
         'android_toolchain%': '<(android_toolchain)',
         'arm_version%': '<(arm_version)',
+        'android_triple%': '<(android_triple)',
         'host_os%': '<(host_os)',

         # Print to stdout on Android.
@@ -365,37 +372,43 @@
           ['android_ndk_root==""', {
             'variables': {
               'android_sysroot': '<(android_toolchain)/sysroot/',
+              'android_link_sysroot': '<(android_toolchain)/sysroot/',
               'android_stl': '<(android_toolchain)/sources/cxx-stl/',
             },
             'conditions': [
               ['target_arch=="x64"', {
-                'android_lib': '<(android_sysroot)/usr/lib64',
+                'android_lib': '<(android_link_sysroot)/usr/lib64',
               }, {
-                'android_lib': '<(android_sysroot)/usr/lib',
+                'android_lib': '<(android_link_sysroot)/usr/lib',
               }],
             ],
-            'android_libcpp_include': '<(android_stl)/llvm-libc++/libcxx/include',
-            'android_libcpp_abi_include': '<(android_stl)/llvm-libc++abi/libcxxabi/include',
+            'android_libcpp_include': '<(android_stl)/llvm-libc++/include',
+            'android_libcpp_abi_include': '<(android_stl)/llvm-libc++abi/include',
             'android_libcpp_libs': '<(android_stl)/llvm-libc++/libs',
             'android_support_include': '<(android_toolchain)/sources/android/support/include',
             'android_sysroot': '<(android_sysroot)',
+            'android_link_sysroot': '<(android_link_sysroot)',
+            'android_unified_include': '<(android_sysroot)/usr/include/<(android_triple)',
           }, {
             'variables': {
-              'android_sysroot': '<(android_ndk_root)/platforms/android-<(android_target_platform)/arch-<(android_target_arch)',
+              'android_sysroot': '<(android_ndk_root)/sysroot',
+              'android_link_sysroot': '<(android_ndk_root)/platforms/android-<(android_target_platform)/arch-<(android_target_arch)',
               'android_stl': '<(android_ndk_root)/sources/cxx-stl/',
             },
             'conditions': [
               ['target_arch=="x64"', {
-                'android_lib': '<(android_sysroot)/usr/lib64',
+                'android_lib': '<(android_link_sysroot)/usr/lib64',
               }, {
-                'android_lib': '<(android_sysroot)/usr/lib',
+                'android_lib': '<(android_link_sysroot)/usr/lib',
               }],
             ],
-            'android_libcpp_include': '<(android_stl)/llvm-libc++/libcxx/include',
-            'android_libcpp_abi_include': '<(android_stl)/llvm-libc++abi/libcxxabi/include',
+            'android_libcpp_include': '<(android_stl)/llvm-libc++/include',
+            'android_libcpp_abi_include': '<(android_stl)/llvm-libc++abi/include',
             'android_libcpp_libs': '<(android_stl)/llvm-libc++/libs',
             'android_support_include': '<(android_ndk_root)/sources/android/support/include',
             'android_sysroot': '<(android_sysroot)',
+            'android_link_sysroot': '<(android_link_sysroot)',
+            'android_unified_include': '<(android_sysroot)/usr/include/<(android_triple)',
           }],
         ],
         'android_libcpp_library': 'c++_static',
@@ -762,7 +775,7 @@
           '-Wnon-virtual-dtor',
           '-fno-exceptions',
           '-fno-rtti',
-          '-std=gnu++11',
+          '-std=gnu++1y',
         ],
         'ldflags': [ '-pthread', ],
         'conditions': [
@@ -826,7 +839,7 @@
           '-Wnon-virtual-dtor',
           '-fno-exceptions',
           '-fno-rtti',
-          '-std=gnu++11',
+          '-std=gnu++1y',
         ],
         'conditions': [
           [ 'visibility=="hidden"', {
@@ -1090,7 +1103,7 @@
           ['clang==1', {
             'xcode_settings': {
               'GCC_VERSION': 'com.apple.compilers.llvm.clang.1_0',
-              'CLANG_CXX_LANGUAGE_STANDARD': 'c++11',  # -std=c++11
+              'CLANG_CXX_LANGUAGE_STANDARD': 'c++14',  # -std=c++14
             },
             'conditions': [
               ['clang_xcode==0', {
@@ -1122,13 +1135,13 @@
         'configurations': {
           'Release': {
             'cflags': [
-              '-fomit-frame-pointer',
+              '-fomit-frame-pointer', '-O2',
             ],
           },  # Release
         },  # configurations
         'cflags': [ '-Wno-abi', '-Wall', '-W', '-Wno-unused-parameter'],
         'cflags_cc': [ '-Wnon-virtual-dtor', '-fno-rtti', '-fno-exceptions',
-                       '-std=gnu++11' ],
+                       '-std=gnu++14' ],
         'target_conditions': [
           ['_toolset=="target"', {
             'cflags!': [
@@ -1147,9 +1160,11 @@
               '-isystem<(android_libcpp_include)',
               '-isystem<(android_libcpp_abi_include)',
               '-isystem<(android_support_include)',
+              '-isystem<(android_unified_include)',
             ],
             'defines': [
               'ANDROID',
+              '__ANDROID_API__=<(android_target_platform)',
               #'__GNU_SOURCE=1',  # Necessary for clone()
               'HAVE_OFF64_T',
               'HAVE_SYS_UIO_H',
@@ -1161,7 +1176,7 @@
             ],
             'ldflags': [
               '-Wl,--no-undefined',
-              '--sysroot=<(android_sysroot)',
+              '--sysroot=<(android_link_sysroot)',
               '-nostdlib',
             ],
             'libraries!': [
@@ -1240,10 +1255,7 @@
               }],
               ['(target_arch=="arm" or target_arch=="arm64" or target_arch=="x64" or target_arch=="ia32") and component!="shared_library"', {
                 'cflags': [
-                  '-fPIE',
-                ],
-                'ldflags': [
-                  '-pie',
+                  '-fPIC',
                 ],
               }],
             ],
@@ -1323,7 +1335,7 @@
     ['clang==0 and host_clang==1 and target_arch!="ia32" and target_arch!="x64"', {
       'target_conditions': [
         ['_toolset=="host"', {
-          'cflags_cc': [ '-std=gnu++11', ],
+          'cflags_cc': [ '-std=gnu++1y', ],
         }],
       ],
       'target_defaults': {
diff --git a/src/arm/simulator-arm.cc b/src/arm/simulator-arm.cc
index 52fe902237..c4af874fef 100644
--- a/src/arm/simulator-arm.cc
+++ b/src/arm/simulator-arm.cc
@@ -5822,7 +5822,7 @@ intptr_t Simulator::CallImpl(byte* entry, int argument_count,
   return get_register(r0);
 }

-int32_t Simulator::CallFPImpl(byte* entry, double d0, double d1) {
+intptr_t Simulator::CallFPImpl(byte* entry, double d0, double d1) {
   if (use_eabi_hardfloat()) {
     set_d_register_from_double(0, d0);
     set_d_register_from_double(1, d1);
diff --git a/src/v8.gyp b/src/v8.gyp
index 218b173af2..47edd5f61b 100644
--- a/src/v8.gyp
+++ b/src/v8.gyp
@@ -135,6 +135,7 @@
     {
       'target_name': 'v8_init',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'dependencies': [
         'v8_initializers',
       ],
@@ -159,6 +160,7 @@
     {
       'target_name': 'v8_initializers',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'dependencies': [
         'v8_base',
       ],
@@ -290,6 +292,7 @@
     {
       'target_name': 'v8_snapshot',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'conditions': [
         ['want_separate_host_toolset==1', {
           'toolsets': ['host', 'target'],
@@ -374,6 +377,7 @@
     {
       'target_name': 'v8_nosnapshot',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'dependencies': [
         'v8_base',
       ],
@@ -405,6 +409,7 @@
     {
       'target_name': 'v8_external_snapshot',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'conditions': [
         [ 'v8_use_external_startup_data==1', {
           'conditions': [
@@ -523,6 +528,7 @@
     {
       'target_name': 'v8_base',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'dependencies': [
         'v8_libbase',
         'v8_libsampler',
@@ -1870,7 +1876,8 @@
     },
     {
       'target_name': 'v8_libbase',
-      'type': '<(component)',
+      'type': 'static_library',
+      'standalone_static_library': 1,
       'variables': {
         'optimize': 'max',
       },
@@ -2203,7 +2210,8 @@
     },
     {
       'target_name': 'v8_libplatform',
-      'type': '<(component)',
+      'type': 'static_library',
+      'standalone_static_library': 1,
       'variables': {
         'optimize': 'max',
       },
@@ -2259,6 +2267,7 @@
     {
       'target_name': 'v8_libsampler',
       'type': 'static_library',
+      'standalone_static_library': 1,
       'variables': {
         'optimize': 'max',
       },
