diff --git a/include/v8.h b/include/v8.h
index b4b920555b..44090172a3 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -123,12 +123,12 @@ class Isolate;
 class LocalEmbedderHeapTracer;
 class MicrotaskQueue;
 class NeverReadOnlySpaceObject;
+class Object;
 struct ScriptStreamingData;
 template<typename T> class CustomArguments;
 class PropertyCallbackArguments;
 class FunctionCallbackArguments;
 class GlobalHandles;
-class ScopedExternalStringLock;
 
 namespace wasm {
 class NativeModule;
@@ -1005,6 +1005,7 @@ class V8_EXPORT HandleScope {
 
   void Initialize(Isolate* isolate);
 
+  static internal::Object** CreateHandle(internal::Isolate* isolate, internal::Object* value);
   static internal::Address* CreateHandle(internal::Isolate* isolate,
                                          internal::Address value);
 
@@ -1045,8 +1046,8 @@ class V8_EXPORT EscapableHandleScope : public HandleScope {
    */
   template <class T>
   V8_INLINE Local<T> Escape(Local<T> value) {
-    internal::Address* slot =
-        Escape(reinterpret_cast<internal::Address*>(*value));
+    internal::Object** slot =
+        Escape(reinterpret_cast<internal::Object**>(*value));
     return Local<T>(reinterpret_cast<T*>(slot));
   }
 
@@ -1066,6 +1067,7 @@ class V8_EXPORT EscapableHandleScope : public HandleScope {
   void operator delete(void*, size_t);
   void operator delete[](void*, size_t);
 
+  internal::Object** Escape(internal::Object** escape_value);
   internal::Address* Escape(internal::Address* escape_value);
   internal::Address* escape_slot_;
 };
@@ -1374,12 +1376,16 @@ class V8_EXPORT Script {
       Local<Context> context, Local<String> source,
       ScriptOrigin* origin = nullptr);
 
+  static Local<Script> Compile(v8::Local<String> source, v8::ScriptOrigin* origin);
+  static Local<Script> Compile(v8::Local<String> source, v8::Local<String> file_name);
+
   /**
    * Runs the script returning the resulting value. It will be run in the
    * context in which it was created (ScriptCompiler::CompileBound or
    * UnboundScript::BindToCurrentContext()).
    */
   V8_WARN_UNUSED_RESULT MaybeLocal<Value> Run(Local<Context> context);
+  Local<Value> Run();
 
   /**
    * Returns the corresponding context-unbound script.
@@ -1745,8 +1751,8 @@ class V8_EXPORT Message {
    */
   Isolate* GetIsolate() const;
 
-  V8_WARN_UNUSED_RESULT MaybeLocal<String> GetSourceLine(
-      Local<Context> context) const;
+  V8_WARN_UNUSED_RESULT MaybeLocal<String> GetSourceLine(Local<Context> context) const;
+  Local<String> GetSourceLine() const;
 
   /**
    * Returns the origin for the script from where the function causing the
@@ -1771,6 +1777,7 @@ class V8_EXPORT Message {
    * Returns the number, 1-based, of the line where the error occurred.
    */
   V8_WARN_UNUSED_RESULT Maybe<int> GetLineNumber(Local<Context> context) const;
+  int GetLineNumber() const;
 
   /**
    * Returns the index within the script of the first character where
@@ -2755,17 +2762,12 @@ class V8_EXPORT String : public Name {
 
   class V8_EXPORT ExternalStringResourceBase {  // NOLINT
    public:
-    virtual ~ExternalStringResourceBase() = default;
+    virtual ~ExternalStringResourceBase() {}
 
-    /**
-     * If a string is cacheable, the value returned by
-     * ExternalStringResource::data() may be cached, otherwise it is not
-     * expected to be stable beyond the current top-level task.
-     */
-    virtual bool IsCacheable() const { return true; }
+    virtual bool IsCompressible() const { return false; }
 
    protected:
-    ExternalStringResourceBase() = default;
+    ExternalStringResourceBase() {}
 
     /**
      * Internally V8 will call this Dispose method when the external string
@@ -2775,24 +2777,6 @@ class V8_EXPORT String : public Name {
      */
     virtual void Dispose() { delete this; }
 
-    /**
-     * For a non-cacheable string, the value returned by
-     * |ExternalStringResource::data()| has to be stable between |Lock()| and
-     * |Unlock()|, that is the string must behave as is |IsCacheable()| returned
-     * true.
-     *
-     * These two functions must be thread-safe, and can be called from anywhere.
-     * They also must handle lock depth, in the sense that each can be called
-     * several times, from different threads, and unlocking should only happen
-     * when the balance of Lock() and Unlock() calls is 0.
-     */
-    virtual void Lock() const {}
-
-    /**
-     * Unlocks the string.
-     */
-    virtual void Unlock() const {}
-
     // Disallow copying and assigning.
     ExternalStringResourceBase(const ExternalStringResourceBase&) = delete;
     void operator=(const ExternalStringResourceBase&) = delete;
@@ -2800,7 +2784,6 @@ class V8_EXPORT String : public Name {
    private:
     friend class internal::ExternalString;
     friend class v8::String;
-    friend class internal::ScopedExternalStringLock;
   };
 
   /**
@@ -2992,6 +2975,7 @@ class V8_EXPORT String : public Name {
    */
   class V8_EXPORT Utf8Value {
    public:
+    Utf8Value(Local<v8::Value> obj);
     Utf8Value(Isolate* isolate, Local<v8::Value> obj);
     ~Utf8Value();
     char* operator*() { return str_; }
@@ -3015,6 +2999,7 @@ class V8_EXPORT String : public Name {
    */
   class V8_EXPORT Value {
    public:
+    Value(Local<v8::Value> obj);
     Value(Isolate* isolate, Local<v8::Value> obj);
     ~Value();
     uint16_t* operator*() { return str_; }
@@ -3446,6 +3431,7 @@ class V8_EXPORT Object : public Value {
    * See also v8::Object::HasOwnProperty() and
    * v8::Object::HasRealNamedProperty().
    */
+  bool Has(Local<Value> key);
   V8_WARN_UNUSED_RESULT Maybe<bool> Has(Local<Context> context,
                                         Local<Value> key);
 
@@ -3460,6 +3446,12 @@ class V8_EXPORT Object : public Value {
   /**
    * Note: SideEffectType affects the getter only, not the setter.
    */
+  bool SetAccessor(Local<Name> name,
+      AccessorNameGetterCallback getter,
+      AccessorNameSetterCallback setter = 0,
+      Local<Value> data = Local<Value>(),
+      AccessControl settings = DEFAULT,
+      PropertyAttribute attribute = None);
   V8_WARN_UNUSED_RESULT Maybe<bool> SetAccessor(
       Local<Context> context, Local<Name> name,
       AccessorNameGetterCallback getter,
@@ -3519,6 +3511,7 @@ class V8_EXPORT Object : public Value {
    * array returned by this method contains the same values as would
    * be enumerated by a for-in statement over this object.
    */
+  V8_DEPRECATED("Use maybe version", Local<Array> GetPropertyNames());
   V8_WARN_UNUSED_RESULT MaybeLocal<Array> GetPropertyNames(
       Local<Context> context);
   V8_WARN_UNUSED_RESULT MaybeLocal<Array> GetPropertyNames(
@@ -3531,6 +3524,7 @@ class V8_EXPORT Object : public Value {
    * the returned array doesn't contain the names of properties from
    * prototype objects.
    */
+  V8_DEPRECATED("Use maybe version", Local<Array> GetOwnPropertyNames());
   V8_WARN_UNUSED_RESULT MaybeLocal<Array> GetOwnPropertyNames(
       Local<Context> context);
 
@@ -3636,6 +3630,7 @@ class V8_EXPORT Object : public Value {
    *
    * See also v8::Object::Has() and v8::Object::HasRealNamedProperty().
    */
+  bool HasOwnProperty(Local<String> key);
   V8_WARN_UNUSED_RESULT Maybe<bool> HasOwnProperty(Local<Context> context,
                                                    Local<Name> key);
   V8_WARN_UNUSED_RESULT Maybe<bool> HasOwnProperty(Local<Context> context,
@@ -3681,6 +3676,7 @@ class V8_EXPORT Object : public Value {
    * in the prototype chain.
    * This means interceptors in the prototype chain are not called.
    */
+  Local<Value> GetRealNamedProperty(Local<String> key);
   V8_WARN_UNUSED_RESULT MaybeLocal<Value> GetRealNamedProperty(
       Local<Context> context, Local<Name> key);
 
@@ -3952,6 +3948,7 @@ class FunctionCallbackInfo {
   V8_INLINE int Length() const;
   /** Accessor for the available arguments. */
   V8_INLINE Local<Value> operator[](int i) const;
+  V8_INLINE Local<Function> Callee() const;
   /** Returns the receiver. This corresponds to the "this" value. */
   V8_INLINE Local<Object> This() const;
   /**
@@ -3988,6 +3985,7 @@ class FunctionCallbackInfo {
   static const int kReturnValueIndex = 3;
   static const int kDataIndex = 4;
   static const int kNewTargetIndex = 5;
+  static const int kCalleeIndex = 6;
 
   V8_INLINE FunctionCallbackInfo(internal::Address* implicit_args,
                                  internal::Address* values, int length);
@@ -4136,6 +4134,8 @@ class V8_EXPORT Function : public Object {
     return NewInstance(context, 0, nullptr);
   }
 
+  Local<Object> NewInstance(int argc, Local<Value> argv[]) const;
+
   /**
    * When side effect checks are enabled, passing kHasNoSideEffect allows the
    * constructor to be invoked without throwing. Calls made within the
@@ -5276,6 +5276,7 @@ class V8_EXPORT SharedArrayBuffer : public Object {
  */
 class V8_EXPORT Date : public Object {
  public:
+  static Local<Value> New(Isolate* isolate, double time);
   static V8_WARN_UNUSED_RESULT MaybeLocal<Value> New(Local<Context> context,
                                                      double time);
 
@@ -5577,6 +5578,12 @@ class V8_EXPORT Template : public Data {
   friend class FunctionTemplate;
 };
 
+typedef void (*NamedPropertyGetterCallback)(Local<String> property, const PropertyCallbackInfo<Value>& info);
+typedef void (*NamedPropertySetterCallback)(Local<String> property, Local<Value> value, const PropertyCallbackInfo<Value>& info);
+typedef void (*NamedPropertyQueryCallback)(Local<String> property, const PropertyCallbackInfo<Integer>& info);
+typedef void (*NamedPropertyDeleterCallback)(Local<String> property, const PropertyCallbackInfo<Boolean>& info);
+typedef void (*NamedPropertyEnumeratorCallback)(const PropertyCallbackInfo<Array>& info);
+
 // TODO(dcarney): Replace GenericNamedPropertyFooCallback with just
 // NamedPropertyFooCallback.
 
@@ -5925,8 +5932,7 @@ class V8_EXPORT FunctionTemplate : public Template {
       Isolate* isolate, FunctionCallback callback = nullptr,
       Local<Value> data = Local<Value>(),
       Local<Signature> signature = Local<Signature>(), int length = 0,
-      ConstructorBehavior behavior = ConstructorBehavior::kAllow,
-      SideEffectType side_effect_type = SideEffectType::kHasSideEffect);
+      ConstructorBehavior behavior = ConstructorBehavior::kAllow);
 
   /** Get a template included in the snapshot by index. */
   static MaybeLocal<FunctionTemplate> FromSnapshot(Isolate* isolate,
@@ -5942,6 +5948,7 @@ class V8_EXPORT FunctionTemplate : public Template {
       SideEffectType side_effect_type = SideEffectType::kHasSideEffect);
 
   /** Returns the unique function instance in the current execution context.*/
+  V8_DEPRECATED("Use maybe version", Local<Function> GetFunction());
   V8_WARN_UNUSED_RESULT MaybeLocal<Function> GetFunction(
       Local<Context> context);
 
@@ -6283,9 +6290,15 @@ class V8_EXPORT ObjectTemplate : public Template {
       AccessorNameSetterCallback setter = nullptr,
       Local<Value> data = Local<Value>(), AccessControl settings = DEFAULT,
       PropertyAttribute attribute = None,
-      Local<AccessorSignature> signature = Local<AccessorSignature>(),
-      SideEffectType getter_side_effect_type = SideEffectType::kHasSideEffect,
-      SideEffectType setter_side_effect_type = SideEffectType::kHasSideEffect);
+      Local<AccessorSignature> signature = Local<AccessorSignature>());
+
+  void SetNamedPropertyHandler(
+      NamedPropertyGetterCallback getter,
+      NamedPropertySetterCallback setter = 0,
+      NamedPropertyQueryCallback query = 0,
+      NamedPropertyDeleterCallback deleter = 0,
+      NamedPropertyEnumeratorCallback enumerator = 0,
+      Local<Value> data = Local<Value>());
 
   /**
    * Sets a named property handler on the object template.
@@ -6458,6 +6471,20 @@ class V8_EXPORT AccessorSignature : public Data {
 
 
 // --- Extensions ---
+V8_DEPRECATED("Implementation detail", class)
+V8_EXPORT ExternalOneByteStringResourceImpl
+    : public String::ExternalOneByteStringResource {
+ public:
+  ExternalOneByteStringResourceImpl() : data_(nullptr), length_(0) {}
+  ExternalOneByteStringResourceImpl(const char* data, size_t length)
+      : data_(data), length_(length) {}
+  const char* data() const override { return data_; }
+  size_t length() const override { return length_; }
+
+ private:
+  const char* data_;
+  size_t length_;
+};
 
 /**
  * Ignore
@@ -8815,6 +8842,7 @@ class V8_EXPORT V8 {
  private:
   V8();
 
+  static internal::Object** GlobalizeReference(internal::Isolate* isolate, internal::Object** handle);
   static internal::Address* GlobalizeReference(internal::Isolate* isolate,
                                                internal::Address* handle);
   static internal::Address* GlobalizeTracedReference(internal::Isolate* isolate,
@@ -8825,12 +8853,17 @@ class V8_EXPORT V8 {
   static void MoveTracedGlobalReference(internal::Address** from,
                                         internal::Address** to);
   static internal::Address* CopyGlobalReference(internal::Address* from);
+  static void DisposeGlobal(internal::Object** global_handle);
   static void DisposeGlobal(internal::Address* global_handle);
   static void DisposeTracedGlobal(internal::Address* global_handle);
+  static internal::Address* CopyPersistent(internal::Address* handle);
+  static void MakeWeak(internal::Object** location, void* data, WeakCallbackInfo<void>::Callback weak_callback, WeakCallbackType type);
   static void MakeWeak(internal::Address* location, void* data,
                        WeakCallbackInfo<void>::Callback weak_callback,
                        WeakCallbackType type);
+  static void MakeWeak(internal::Object*** location_addr);
   static void MakeWeak(internal::Address** location_addr);
+  static void* ClearWeak(internal::Object** location);
   static void* ClearWeak(internal::Address* location);
   static void SetFinalizationCallbackTraced(
       internal::Address* location, void* parameter,
@@ -9097,6 +9130,7 @@ class V8_EXPORT TryCatch {
    * all TryCatch blocks should be stack allocated because the memory
    * location itself is compared against JavaScript try/catch blocks.
    */
+  explicit TryCatch();
   explicit TryCatch(Isolate* isolate);
 
   /**
@@ -9154,6 +9188,7 @@ class V8_EXPORT TryCatch {
    * Returns the .stack property of the thrown object.  If no .stack
    * property is present an empty handle is returned.
    */
+  Local<Value> StackTrace() const;
   V8_WARN_UNUSED_RESULT MaybeLocal<Value> StackTrace(
       Local<Context> context) const;
 
@@ -9727,7 +9762,7 @@ template <class T>
 Local<T> Local<T>::New(Isolate* isolate, T* that) {
   if (that == nullptr) return Local<T>();
   T* that_ptr = that;
-  internal::Address* p = reinterpret_cast<internal::Address*>(that_ptr);
+  internal::Object** p = reinterpret_cast<internal::Object**>(that_ptr);
   return Local<T>(reinterpret_cast<T*>(HandleScope::CreateHandle(
       reinterpret_cast<internal::Isolate*>(isolate), *p)));
 }
@@ -9770,7 +9805,7 @@ void* WeakCallbackInfo<T>::GetInternalField(int index) const {
 template <class T>
 T* PersistentBase<T>::New(Isolate* isolate, T* that) {
   if (that == nullptr) return nullptr;
-  internal::Address* p = reinterpret_cast<internal::Address*>(that);
+  internal::Object** p = reinterpret_cast<internal::Object**>(that);
   return reinterpret_cast<T*>(
       V8::GlobalizeReference(reinterpret_cast<internal::Isolate*>(isolate),
                              p));
@@ -9808,7 +9843,7 @@ bool PersistentBase<T>::IsWeak() const {
 template <class T>
 void PersistentBase<T>::Reset() {
   if (this->IsEmpty()) return;
-  V8::DisposeGlobal(reinterpret_cast<internal::Address*>(this->val_));
+  V8::DisposeGlobal(reinterpret_cast<internal::Object**>(this->val_));
   val_ = nullptr;
 }
 
@@ -9840,20 +9875,20 @@ V8_INLINE void PersistentBase<T>::SetWeak(
     P* parameter, typename WeakCallbackInfo<P>::Callback callback,
     WeakCallbackType type) {
   typedef typename WeakCallbackInfo<void>::Callback Callback;
-  V8::MakeWeak(reinterpret_cast<internal::Address*>(this->val_), parameter,
+  V8::MakeWeak(reinterpret_cast<internal::Object**>(this->val_), parameter,
                reinterpret_cast<Callback>(callback), type);
 }
 
 template <class T>
 void PersistentBase<T>::SetWeak() {
-  V8::MakeWeak(reinterpret_cast<internal::Address**>(&this->val_));
+  V8::MakeWeak(reinterpret_cast<internal::Object***>(&this->val_));
 }
 
 template <class T>
 template <typename P>
 P* PersistentBase<T>::ClearWeak() {
   return reinterpret_cast<P*>(
-      V8::ClearWeak(reinterpret_cast<internal::Address*>(this->val_)));
+      V8::ClearWeak(reinterpret_cast<internal::Object**>(this->val_)));
 }
 
 template <class T>
@@ -10158,6 +10193,11 @@ Local<Value> FunctionCallbackInfo<T>::operator[](int i) const {
   return Local<Value>(reinterpret_cast<Value*>(values_ - i));
 }
 
+template<typename T>
+Local<Function> FunctionCallbackInfo<T>::Callee() const {
+  return Local<Function>(reinterpret_cast<Function*>(
+      &implicit_args_[kCalleeIndex]));
+}
 
 template<typename T>
 Local<Object> FunctionCallbackInfo<T>::This() const {
@@ -10318,6 +10358,7 @@ AccessorSignature* AccessorSignature::Cast(Data* data) {
 
 Local<Value> Object::GetInternalField(int index) {
 #ifndef V8_ENABLE_CHECKS
+  typedef internal::Object* O;
   typedef internal::Address A;
   typedef internal::Internals I;
   A obj = *reinterpret_cast<A*>(this);
@@ -10336,7 +10377,7 @@ Local<Value> Object::GetInternalField(int index) {
 #endif
     internal::Isolate* isolate =
         internal::IsolateFromNeverReadOnlySpaceObject(obj);
-    A* result = HandleScope::CreateHandle(isolate, value);
+    O* result = HandleScope::CreateHandle(isolate, reinterpret_cast<O>(value));
     return Local<Value>(reinterpret_cast<Value*>(result));
   }
 #endif
@@ -10961,6 +11002,7 @@ int64_t Isolate::AdjustAmountOfExternalAllocatedMemory(
 
 Local<Value> Context::GetEmbedderData(int index) {
 #ifndef V8_ENABLE_CHECKS
+  typedef internal::Object* O;
   typedef internal::Address A;
   typedef internal::Internals I;
   A ctx = *reinterpret_cast<const A*>(this);
@@ -10977,7 +11019,8 @@ Local<Value> Context::GetEmbedderData(int index) {
 #endif
   internal::Isolate* isolate = internal::IsolateFromNeverReadOnlySpaceObject(
       *reinterpret_cast<A*>(this));
-  A* result = HandleScope::CreateHandle(isolate, value);
+  O* result =
+      HandleScope::CreateHandle(isolate, reinterpret_cast<O>(value));
   return Local<Value>(reinterpret_cast<Value*>(result));
 #else
   return SlowGetEmbedderData(index);
diff --git a/src/api.cc b/src/api.cc
index a52fadc2ee..5f72f43c28 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -249,6 +249,11 @@ Local<Context> ContextFromNeverReadOnlySpaceObject(
   return reinterpret_cast<v8::Isolate*>(obj->GetIsolate())->GetCurrentContext();
 }
 
+Local<Context> UnsafeContextFromHeapObject(i::Handle<i::Object> obj) {
+  i::MemoryChunk* chunk = i::MemoryChunk::FromHeapObject(i::HeapObject::cast(*obj));
+  return reinterpret_cast<Isolate*>(chunk->heap()->isolate())->GetCurrentContext();
+}
+
 class InternalEscapableScope : public v8::EscapableHandleScope {
  public:
   explicit inline InternalEscapableScope(i::Isolate* isolate)
@@ -999,6 +1004,9 @@ void SetResourceConstraints(i::Isolate* isolate,
   }
 }
 
+i::Object** V8::GlobalizeReference(i::Isolate* isolate, i::Object** obj) {
+  return reinterpret_cast<i::Object**>(GlobalizeReference(isolate, reinterpret_cast<i::Address*>(obj)));
+}
 i::Address* V8::GlobalizeReference(i::Isolate* isolate, i::Address* obj) {
   LOG_API(isolate, Persistent, New);
   i::Handle<i::Object> result = isolate->global_handles()->Create(*obj);
@@ -1042,16 +1050,25 @@ void V8::RegisterExternallyReferencedObject(i::Address* location,
   isolate->heap()->RegisterExternallyReferencedObject(location);
 }
 
+void V8::MakeWeak(i::Object** location, void* parameter, WeakCallbackInfo<void>::Callback weak_callback, WeakCallbackType type) {
+  MakeWeak(reinterpret_cast<i::Address*>(location), parameter, weak_callback, type);
+}
 void V8::MakeWeak(i::Address* location, void* parameter,
                   WeakCallbackInfo<void>::Callback weak_callback,
                   WeakCallbackType type) {
   i::GlobalHandles::MakeWeak(location, parameter, weak_callback, type);
 }
 
+void V8::MakeWeak(i::Object*** location_addr) {
+  MakeWeak(reinterpret_cast<i::Address**>(location_addr));
+}
 void V8::MakeWeak(i::Address** location_addr) {
   i::GlobalHandles::MakeWeak(location_addr);
 }
 
+void* V8::ClearWeak(i::Object** location) {
+  return i::GlobalHandles::ClearWeakness(reinterpret_cast<i::Address*>(location));
+}
 void* V8::ClearWeak(i::Address* location) {
   return i::GlobalHandles::ClearWeakness(location);
 }
@@ -1060,6 +1077,9 @@ void V8::AnnotateStrongRetainer(i::Address* location, const char* label) {
   i::GlobalHandles::AnnotateStrongRetainer(location, label);
 }
 
+void V8::DisposeGlobal(i::Object** location) {
+  DisposeGlobal(reinterpret_cast<i::Address*>(location));
+}
 void V8::DisposeGlobal(i::Address* location) {
   i::GlobalHandles::Destroy(location);
 }
@@ -1144,6 +1164,9 @@ int HandleScope::NumberOfHandles(Isolate* isolate) {
       reinterpret_cast<i::Isolate*>(isolate));
 }
 
+i::Object** HandleScope::CreateHandle(i::Isolate* isolate, i::Object* value) {
+  return reinterpret_cast<i::Object**>(CreateHandle(isolate, reinterpret_cast<i::Address>(value)));
+}
 i::Address* HandleScope::CreateHandle(i::Isolate* isolate, i::Address value) {
   return i::HandleScope::CreateHandle(isolate, value);
 }
@@ -1155,6 +1178,9 @@ EscapableHandleScope::EscapableHandleScope(Isolate* v8_isolate) {
   Initialize(v8_isolate);
 }
 
+i::Object** EscapableHandleScope::Escape(i::Object** escape_value) {
+  return reinterpret_cast<i::Object**>(Escape(reinterpret_cast<i::Address*>(escape_value)));
+}
 i::Address* EscapableHandleScope::Escape(i::Address* escape_value) {
   i::Heap* heap = reinterpret_cast<i::Isolate*>(GetIsolate())->heap();
   Utils::ApiCheck(i::Object(*escape_slot_)->IsTheHole(heap->isolate()),
@@ -1469,15 +1495,14 @@ static Local<FunctionTemplate> FunctionTemplateNew(
 
 Local<FunctionTemplate> FunctionTemplate::New(
     Isolate* isolate, FunctionCallback callback, v8::Local<Value> data,
-    v8::Local<Signature> signature, int length, ConstructorBehavior behavior,
-    SideEffectType side_effect_type) {
+    v8::Local<Signature> signature, int length, ConstructorBehavior behavior) {
   i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(isolate);
   // Changes to the environment cannot be captured in the snapshot. Expect no
   // function templates when the isolate is created for serialization.
   LOG_API(i_isolate, FunctionTemplate, New);
   ENTER_V8_NO_SCRIPT_NO_EXCEPTION(i_isolate);
   auto templ = FunctionTemplateNew(i_isolate, callback, data, signature, length,
-                                   false, Local<Private>(), side_effect_type);
+                                   false, Local<Private>(), SideEffectType::kHasSideEffect);
   if (behavior == ConstructorBehavior::kThrow) templ->RemovePrototype();
   return templ;
 }
@@ -1816,12 +1841,10 @@ void ObjectTemplate::SetAccessor(v8::Local<Name> name,
                                  AccessorNameSetterCallback setter,
                                  v8::Local<Value> data, AccessControl settings,
                                  PropertyAttribute attribute,
-                                 v8::Local<AccessorSignature> signature,
-                                 SideEffectType getter_side_effect_type,
-                                 SideEffectType setter_side_effect_type) {
+                                 v8::Local<AccessorSignature> signature) {
   TemplateSetAccessor(this, name, getter, setter, data, settings, attribute,
                       signature, i::FLAG_disable_old_api_accessors, false,
-                      getter_side_effect_type, setter_side_effect_type);
+                      SideEffectType::kHasSideEffect, SideEffectType::kHasSideEffect);
 }
 
 template <typename Getter, typename Setter, typename Query, typename Descriptor,
@@ -1904,6 +1927,15 @@ static void ObjectTemplateSetNamedPropertyHandler(
   i::FunctionTemplateInfo::SetNamedPropertyHandler(isolate, cons, obj);
 }
 
+void ObjectTemplate::SetNamedPropertyHandler(
+    NamedPropertyGetterCallback getter, NamedPropertySetterCallback setter,
+    NamedPropertyQueryCallback query, NamedPropertyDeleterCallback remover,
+    NamedPropertyEnumeratorCallback enumerator, Local<Value> data) {
+  ObjectTemplateSetNamedPropertyHandler(
+      this, getter, setter, query, nullptr, remover, enumerator, nullptr, data,
+      PropertyHandlerFlags::kOnlyInterceptStrings);
+}
+
 void ObjectTemplate::SetHandler(
     const NamedPropertyHandlerConfiguration& config) {
   ObjectTemplateSetNamedPropertyHandler(
@@ -2181,6 +2213,14 @@ MaybeLocal<Value> Script::Run(Local<Context> context) {
   RETURN_ESCAPED(result);
 }
 
+Local<Value> Script::Run() {
+  auto self = Utils::OpenHandle(this, true);
+  // If execution is terminating, Compile(..)->Run() requires this
+  // check.
+  if (self.is_null()) return Local<Value>();
+  auto context = UnsafeContextFromHeapObject(self);
+  RETURN_TO_LOCAL_UNCHECKED(Run(context), Value);
+}
 
 Local<Value> ScriptOrModule::GetResourceName() {
   i::Handle<i::Script> obj = Utils::OpenHandle(this);
@@ -2656,9 +2696,39 @@ MaybeLocal<Script> Script::Compile(Local<Context> context, Local<String> source,
   return ScriptCompiler::Compile(context, &script_source);
 }
 
+Local<Script> Script::Compile(v8::Local<String> source,
+                              v8::ScriptOrigin* origin) {
+  auto str = Utils::OpenHandle(*source);
+  auto context = UnsafeContextFromHeapObject(str);
+  RETURN_TO_LOCAL_UNCHECKED(Compile(context, source, origin), Script);
+}
+
+Local<Script> Script::Compile(v8::Local<String> source,
+                              v8::Local<String> file_name) {
+  auto str = Utils::OpenHandle(*source);
+  auto context = UnsafeContextFromHeapObject(str);
+  ScriptOrigin origin(file_name);
+  return Compile(context, source, &origin).FromMaybe(Local<Script>());
+}
 
 // --- E x c e p t i o n s ---
 
+v8::TryCatch::TryCatch()
+    : isolate_(i::Isolate::Current()),
+      next_(isolate_->try_catch_handler()),
+      is_verbose_(false),
+      can_continue_(true),
+      capture_message_(true),
+      rethrow_(false),
+      has_terminated_(false) {
+  ResetInternal();
+  // Special handling for simulators which have a separate JS stack.
+  js_stack_comparable_address_ =
+      reinterpret_cast<void*>(
+        i::SimulatorStack::RegisterJSStackComparableAddress(isolate_));
+  isolate_->RegisterTryCatchHandler(this);
+}
+
 v8::TryCatch::TryCatch(v8::Isolate* isolate)
     : isolate_(reinterpret_cast<i::Isolate*>(isolate)),
       next_(isolate_->try_catch_handler()),
@@ -2761,6 +2831,10 @@ MaybeLocal<Value> v8::TryCatch::StackTrace(Local<Context> context) const {
   RETURN_ESCAPED(result);
 }
 
+v8::Local<Value> v8::TryCatch::StackTrace() const {
+  auto context = reinterpret_cast<v8::Isolate*>(isolate_)->GetCurrentContext();
+  RETURN_TO_LOCAL_UNCHECKED(StackTrace(context), Value);
+}
 
 v8::Local<v8::Message> v8::TryCatch::Message() const {
   i::Object message(reinterpret_cast<i::Address>(message_obj_));
@@ -2855,6 +2929,10 @@ Maybe<int> Message::GetLineNumber(Local<Context> context) const {
   return Just(msg->GetLineNumber());
 }
 
+int Message::GetLineNumber() const {
+  auto context = UnsafeContextFromHeapObject(Utils::OpenHandle(this));
+  return GetLineNumber(context).FromMaybe(0);
+}
 
 int Message::GetStartPosition() const {
   auto self = Utils::OpenHandle(this);
@@ -2928,6 +3006,10 @@ MaybeLocal<String> Message::GetSourceLine(Local<Context> context) const {
   RETURN_ESCAPED(Utils::ToLocal(msg->GetSourceLine()));
 }
 
+Local<String> Message::GetSourceLine() const {
+  auto context = UnsafeContextFromHeapObject(Utils::OpenHandle(this));
+  RETURN_TO_LOCAL_UNCHECKED(GetSourceLine(context), String)
+}
 
 void Message::PrintCurrentStackTrace(Isolate* isolate, FILE* out) {
   i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(isolate);
@@ -4435,6 +4517,11 @@ MaybeLocal<Array> v8::Object::GetPropertyNames(
   RETURN_ESCAPED(Utils::ToLocal(result));
 }
 
+Local<Array> v8::Object::GetPropertyNames() {
+  auto context = ContextFromNeverReadOnlySpaceObject(Utils::OpenHandle(this));
+  RETURN_TO_LOCAL_UNCHECKED(GetPropertyNames(context), Array);
+}
+
 MaybeLocal<Array> v8::Object::GetOwnPropertyNames(Local<Context> context) {
   return GetOwnPropertyNames(
       context, static_cast<v8::PropertyFilter>(ONLY_ENUMERABLE | SKIP_SYMBOLS));
@@ -4447,6 +4534,11 @@ MaybeLocal<Array> v8::Object::GetOwnPropertyNames(
                           v8::IndexFilter::kIncludeIndices, key_conversion);
 }
 
+Local<Array> v8::Object::GetOwnPropertyNames() {
+  auto context = ContextFromNeverReadOnlySpaceObject(Utils::OpenHandle(this));
+  RETURN_TO_LOCAL_UNCHECKED(GetOwnPropertyNames(context), Array);
+}
+
 MaybeLocal<String> v8::Object::ObjectProtoToString(Local<Context> context) {
   PREPARE_FOR_EXECUTION(context, Object, ObjectProtoToString, String);
   auto self = Utils::OpenHandle(this);
@@ -4521,6 +4613,10 @@ Maybe<bool> v8::Object::DeletePrivate(Local<Context> context,
   return result;
 }
 
+bool v8::Object::Has(v8::Local<Value> key) {
+  auto context = ContextFromNeverReadOnlySpaceObject(Utils::OpenHandle(this));
+  return Has(context, key).FromMaybe(false);
+}
 Maybe<bool> v8::Object::Has(Local<Context> context, Local<Value> key) {
   auto isolate = reinterpret_cast<i::Isolate*>(context->GetIsolate());
   ENTER_V8(isolate, context, Object, Has, Nothing<bool>(), i::HandleScope);
@@ -4619,6 +4715,15 @@ Maybe<bool> Object::SetAccessor(Local<Context> context, Local<Name> name,
                            getter_side_effect_type, setter_side_effect_type);
 }
 
+bool Object::SetAccessor(Local<Name> name, AccessorNameGetterCallback getter,
+                         AccessorNameSetterCallback setter,
+                         v8::Local<Value> data, AccessControl settings,
+                         PropertyAttribute attribute) {
+  auto context = UnsafeContextFromHeapObject(Utils::OpenHandle(this));
+  return ObjectSetAccessor(context, this, name, getter, setter,
+                           data, settings, attribute, i::FLAG_disable_old_api_accessors,
+                           false, SideEffectType::kHasSideEffect, SideEffectType::kHasSideEffect).FromMaybe(false);
+}
 
 void Object::SetAccessorProperty(Local<Name> name, Local<Function> getter,
                                  Local<Function> setter,
@@ -4685,6 +4790,11 @@ Maybe<bool> v8::Object::HasOwnProperty(Local<Context> context, uint32_t index) {
   return result;
 }
 
+bool v8::Object::HasOwnProperty(Local<String> key) {
+  auto context = UnsafeContextFromHeapObject(Utils::OpenHandle(this));
+  return HasOwnProperty(context, key).FromMaybe(false);
+}
+
 Maybe<bool> v8::Object::HasRealNamedProperty(Local<Context> context,
                                              Local<Name> key) {
   auto isolate = reinterpret_cast<i::Isolate*>(context->GetIsolate());
@@ -4807,6 +4917,10 @@ MaybeLocal<Value> v8::Object::GetRealNamedProperty(Local<Context> context,
   RETURN_ESCAPED(result);
 }
 
+Local<Value> v8::Object::GetRealNamedProperty(Local<String> key) {
+  auto context = UnsafeContextFromHeapObject(Utils::OpenHandle(this));
+  RETURN_TO_LOCAL_UNCHECKED(GetRealNamedProperty(context, key), Value);
+}
 
 Maybe<PropertyAttribute> v8::Object::GetRealNamedPropertyAttributes(
     Local<Context> context, Local<Name> key) {
@@ -4922,6 +5036,12 @@ MaybeLocal<Object> Function::NewInstance(Local<Context> context, int argc,
                                        SideEffectType::kHasSideEffect);
 }
 
+Local<v8::Object> Function::NewInstance(int argc,
+                                        v8::Local<v8::Value> argv[]) const {
+  auto context = UnsafeContextFromHeapObject(Utils::OpenHandle(this));
+  RETURN_TO_LOCAL_UNCHECKED(NewInstance(context, argc, argv), Object);
+}
+
 MaybeLocal<Object> Function::NewInstanceWithSideEffectType(
     Local<Context> context, int argc, v8::Local<v8::Value> argv[],
     SideEffectType side_effect_type) const {
@@ -6248,6 +6368,13 @@ MaybeLocal<v8::Function> FunctionTemplate::GetFunction(Local<Context> context) {
   RETURN_ESCAPED(result);
 }
 
+Local<v8::Function> FunctionTemplate::GetFunction() {
+  Local<Context> context =
+      reinterpret_cast<v8::Isolate*>(Utils::OpenHandle(this)->GetIsolate())
+          ->GetCurrentContext();
+  RETURN_TO_LOCAL_UNCHECKED(GetFunction(context), Function);
+}
+
 MaybeLocal<v8::Object> FunctionTemplate::NewRemoteInstance() {
   auto self = Utils::OpenHandle(this);
   i::Isolate* isolate = self->GetIsolate();
@@ -6764,6 +6891,10 @@ MaybeLocal<v8::Value> v8::Date::New(Local<Context> context, double time) {
   RETURN_ESCAPED(result);
 }
 
+Local<v8::Value> v8::Date::New(Isolate* isolate, double time) {
+  auto context = isolate->GetCurrentContext();
+  RETURN_TO_LOCAL_UNCHECKED(New(context, time), Value);
+}
 
 double v8::Date::ValueOf() const {
   i::Handle<i::Object> obj = Utils::OpenHandle(this);
@@ -9005,6 +9136,9 @@ String::Utf8Value::Utf8Value(v8::Isolate* isolate, v8::Local<v8::Value> obj)
   str->WriteUtf8(isolate, str_);
 }
 
+String::Utf8Value::Utf8Value(v8::Local<v8::Value> obj)
+    : String::Utf8Value::Utf8Value(Isolate::GetCurrent(), obj) {}
+
 String::Utf8Value::~Utf8Value() {
   i::DeleteArray(str_);
 }
@@ -9024,6 +9158,9 @@ String::Value::Value(v8::Isolate* isolate, v8::Local<v8::Value> obj)
   str->Write(isolate, str_);
 }
 
+String::Value::Value(v8::Local<v8::Value> obj)
+    : String::Value::Value(v8::Isolate::GetCurrent(), obj) {}
+
 String::Value::~Value() {
   i::DeleteArray(str_);
 }
diff --git a/src/handles.h b/src/handles.h
index 2115f4a878..d2ecb0c949 100644
--- a/src/handles.h
+++ b/src/handles.h
@@ -197,6 +197,7 @@ class HandleScope {
   V8_INLINE static Address* GetHandle(Isolate* isolate, Address value);
 
   // Creates a new handle with the given value.
+  V8_INLINE static Object** CreateHandle(Isolate* isolate, Object* value);
   V8_INLINE static Address* CreateHandle(Isolate* isolate, Address value);
 
   // Deallocates any extensions used by the current scope.
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index 72737bdaf7..19e6e3206a 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -1344,7 +1344,7 @@ MaybeHandle<String> Factory::NewExternalStringFromOneByte(
   }
   if (length == 0) return empty_string();
 
-  Handle<Map> map = resource->IsCacheable()
+  Handle<Map> map = !resource->IsCompressible()
                         ? external_one_byte_string_map()
                         : uncached_external_one_byte_string_map();
   Handle<ExternalOneByteString> external_string(
@@ -1365,7 +1365,7 @@ MaybeHandle<String> Factory::NewExternalStringFromTwoByte(
   }
   if (length == 0) return empty_string();
 
-  Handle<Map> map = resource->IsCacheable() ? external_string_map()
+  Handle<Map> map = !resource->IsCompressible() ? external_string_map()
                                             : uncached_external_string_map();
   Handle<ExternalTwoByteString> external_string(
       ExternalTwoByteString::cast(New(map, AllocationType::kOld)), isolate());
diff --git a/src/objects/string.cc b/src/objects/string.cc
index 22157a3500..2ce28fffcf 100644
--- a/src/objects/string.cc
+++ b/src/objects/string.cc
@@ -71,7 +71,7 @@ bool String::MakeExternal(v8::String::ExternalStringResource* resource) {
   // Externalizing twice leaks the external resource, so it's
   // prohibited by the API.
   DCHECK(this->SupportsExternalization());
-  DCHECK(resource->IsCacheable());
+  DCHECK(!resource->IsCompressible());
 #ifdef ENABLE_SLOW_DCHECKS
   if (FLAG_enable_slow_asserts) {
     // Assert that the resource and the string are equivalent.
@@ -138,7 +138,7 @@ bool String::MakeExternal(v8::String::ExternalOneByteStringResource* resource) {
   // Externalizing twice leaks the external resource, so it's
   // prohibited by the API.
   DCHECK(this->SupportsExternalization());
-  DCHECK(resource->IsCacheable());
+  DCHECK(!resource->IsCompressible());
 #ifdef ENABLE_SLOW_DCHECKS
   if (FLAG_enable_slow_asserts) {
     // Assert that the resource and the string are equivalent.
diff --git a/src/parsing/scanner-character-streams.cc b/src/parsing/scanner-character-streams.cc
index d58e346904..7ffe956232 100644
--- a/src/parsing/scanner-character-streams.cc
+++ b/src/parsing/scanner-character-streams.cc
@@ -18,33 +18,6 @@
 namespace v8 {
 namespace internal {
 
-class ScopedExternalStringLock {
- public:
-  explicit ScopedExternalStringLock(ExternalString string) {
-    DCHECK(!string.is_null());
-    if (string->IsExternalOneByteString()) {
-      resource_ = ExternalOneByteString::cast(string)->resource();
-    } else {
-      DCHECK(string->IsExternalTwoByteString());
-      resource_ = ExternalTwoByteString::cast(string)->resource();
-    }
-    DCHECK(resource_);
-    resource_->Lock();
-  }
-
-  // Copying a lock increases the locking depth.
-  ScopedExternalStringLock(const ScopedExternalStringLock& other) V8_NOEXCEPT
-      : resource_(other.resource_) {
-    resource_->Lock();
-  }
-
-  ~ScopedExternalStringLock() { resource_->Unlock(); }
-
- private:
-  // Not nullptr.
-  const v8::String::ExternalStringResourceBase* resource_;
-};
-
 namespace {
 const unibrow::uchar kUtf8Bom = 0xFEFF;
 }  // namespace
@@ -114,13 +87,11 @@ class ExternalStringStream {
  public:
   ExternalStringStream(ExternalString string, size_t start_offset,
                        size_t length)
-      : lock_(string),
-        data_(string->GetChars() + start_offset),
+      : data_(string->GetChars() + start_offset),
         length_(length) {}
 
   ExternalStringStream(const ExternalStringStream& other) V8_NOEXCEPT
-      : lock_(other.lock_),
-        data_(other.data_),
+      : data_(other.data_),
         length_(other.length_) {}
 
   // The no_gc argument is only here because of the templated way this class
@@ -134,7 +105,6 @@ class ExternalStringStream {
   static const bool kCanAccessHeap = false;
 
  private:
-  ScopedExternalStringLock lock_;
   const Char* const data_;
   const size_t length_;
 };
